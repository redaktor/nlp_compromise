var _ = require("../../_");

/**
 * data module, autogenerated by grunt. <br>
 * change and contribute to dictionary <br>
 *  <br>
 * regexes and functions for number context (e.g. measurement unit) parsing <br>
 * a fluid language approach <br>
 *  <br>
 * @readonly
 * @module data/en/units
 */
var data = require('./lexicon/numbers');

  exports.zip = { systems: [ 'metric', 'us', 'imperial', 'digital', 'natural' ],
  categories: 
   [ [ 'time' ],
     [ 'mass' ],
     [ 'thermodynamic temperature' ],
     [ 'length' ],
     [ 'area' ],
     [ 'volume' ],
     [ 'information content' ],
     [ 'amount of substance' ],
     [ 'electric current' ],
     [ 'luminous intensity' ],
     [ 'plane angle' ],
     [ 'solid angle' ],
     [ 'energy', 'work', 'heat' ],
     [ 'pressure', 'stress' ],
     [ 'power', 'radiant flux' ],
     [ 'force' ],
     [ 'magnetic flux' ],
     [ 'magnetic field strength', 'magnetic flux density' ],
     [ 'inductance' ],
     [ 'electric charge', 'quantity of electricity' ],
     [ 'voltage',
       'electrical potential difference',
       'electromotive force' ],
     [ 'electric capacitance' ],
     [ 'electric conductance' ],
     [ 'electric resistance', 'impedance', 'reactance' ],
     [ 'frequency' ],
     [ 'illumination' ],
     [ 'luminous flux' ],
     [ 'radioactivity' ],
     [ 'radioactivity absorbed dose' ],
     [ 'radioactivity equivalent dose' ],
     [ 'catalytic activity' ],
     [ 'speed', 'velocity' ],
     [ 'acceleration' ],
     [ 'density' ],
     [ 'mass fraction' ],
     [ 'specific volume' ],
     [ 'magnetic field strength' ],
     [ 'electric current density' ],
     [ 'concentration' ],
     [ 'luminance' ],
     [ 'convergence' ],
     [ 'volumetric flow' ],
     [ 'jerk', 'jolt' ],
     [ 'snap', 'jounce' ],
     [ 'angular velocity' ],
     [ 'momentum', 'impulse' ],
     [ 'angular momentum' ],
     [ 'torque', 'moment of force' ],
     [ 'yank' ],
     [ 'wavenumber',
       'optical power',
       'curvature',
       'spatial frequency' ],
     [ 'area density' ],
     [ 'molar volume' ],
     [ 'action' ],
     [ 'heat capacity', 'entropy' ],
     [ 'molar heat capacity', 'molar entropy' ],
     [ 'specific heat capacity', 'specific entropy' ],
     [ 'molar energy' ],
     [ 'specific energy' ],
     [ 'energy density' ],
     [ 'surface tension', 'stiffness' ],
     [ 'heat flux density', 'irradiance' ],
     [ 'thermal conductivity' ],
     [ 'kinematic viscosity', 'diffusion coefficient' ],
     [ 'dynamic viscosity' ],
     [ 'electric displacement field', 'polarization vector' ],
     [ 'electric charge density' ],
     [ 'conductivity' ],
     [ 'molar conductivity' ],
     [ 'permittivity' ],
     [ 'permeability' ],
     [ 'electric field strength' ],
     [ 'luminous energy' ],
     [ 'luminous exposure' ],
     [ 'X and gamma exposure' ],
     [ 'absorbed dose rate' ],
     [ 'resistivity' ] ],
  tags: [ '', 'nautical', 'historical', 'dry', 'fluid', 'avoirdupois' ],
  prefixes: 
   [ [ 24, 'Y', 'yotta', 80 ],
     [ 21, 'Z', 'zetta', 70 ],
     [ 18, 'E', 'e(?:ks|x)a', 60 ],
     [ 15, 'P', 'peta', 50 ],
     [ 12, 'T', 'te[r]+a', 40 ],
     [ 9, 'G', 'giga', 30 ],
     [ 6, 'M', 'mega', 20 ],
     [ 3, 'k', 'kilo', 10 ],
     [ 2, 'h', 'he[ck]to' ],
     [ 1, 'da', 'de[ck]a' ],
     [ -1, 'd', 'de[cz][yi]' ],
     [ -2, 'c', '[cz]ent[yi]' ],
     [ -3, 'm', 'milli' ],
     [ -6, 'u', '\\u00B5|mikro' ],
     [ -9, 'n', 'nano' ],
     [ -12, 'p', 'pi[ck]o' ],
     [ -15, 'f', 'femto' ],
     [ -18, 'a', 'atto' ],
     [ -21, 'z', 'zepto' ],
     [ -24, 'y', 'yokto' ] ],
  units: 
   [ [ 0,
       0,
       's',
       [ 'second', 'se[ck]\\.?(?:(?:[ou])nde?)?|\\u0022|\\u2033' ] ],
     [ 0,
       0,
       'm',
       [ 'minute', 'min\\.?(?:ute(?:[sn]?))?|mikes?' ],
       0,
       [ 60, 0 ] ],
     [ 0,
       0,
       'h',
       [ 'hour', 'h\\.?|hr|hrs|hours?|stunden?|heurs?' ],
       0,
       [ 3600, 0 ] ],
     [ 1, 0, 'g', [ 'gram', 'gramm?e?' ], 0, 3 ],
     [ 1,
       0,
       't',
       [ 'tonne', '(?:metris?ch?e? )?tonne[sn]?(?: métrique)?' ],
       0,
       6 ],
     [ 1, 1, 'gr', 'grain' ],
     [ 1, 1, 'dwt', 'pennyweight' ],
     [ 1, 1, 'dr', 'dram' ],
     [ 1, 1, 'oz', [ 'ounce', '[ou]n[cz]e' ] ],
     [ 1, 1, 'oz t', [ 'troy ounce', 'troy [ou]n[cz]e' ] ],
     [ 1, 1, 'lb t', [ 'troy pound', 'troy p[fo]und' ] ],
     [ 1, 1, 'lb', [ 'pound', 'p[fo]und' ] ],
     [ 1, 1, 'st', 'stone' ],
     [ 1,
       1,
       'cwt',
       [ 'hundredweight', 'hundredweight|cental|zentner' ] ],
     [ 1, 1, 'TON', [ 'ton', '(?:short ?|net ?)?ton[\\W]' ] ],
     [ 1, 1, 'lTON', [ 'long ton', '(?:long ?|gross |weight )ton' ] ],
     [ 2, 0, '°? ?K', 'kelvin' ],
     [ 2, 0, '° ?C', 'celsius', 0, [ 1, 273.15 ] ],
     [ 2, 1, '° ?F', 'fahrenheit' ],
     [ 3, 0, 'm', [ 'meter', 'meter|m[eè]tre' ] ],
     [ 3, 0, 'l', [ 'liter', 'liter|litre' ], 0, 0, 3 ],
     [ 3, 1, 'p', [ 'point', 'point|punkt' ] ],
     [ 3, 1, 'P̸', 'pica' ],
     [ 3, 1, 'in', 'inch' ],
     [ 3, 1, 'ft', [ 'foot', 'f(?:oo|ee)t|fu(?:ß|ss)' ] ],
     [ 3, 1, 'yd', 'yard' ],
     [ 3, 1, 'mi', [ 'mile', 'me?ill?e' ] ],
     [ 3, 1, 'ftm', [ 'fathom', 'fathom|faden|klafter|brasse' ], 1 ],
     [ 3, 1, 'shot', 'shackle|shot', 1 ],
     [ 3, 1, 'cb', [ 'cable', 'c[aâ]ble|kabel' ], 1 ],
     [ 3,
       1,
       'NM',
       [ 'nautical mile (nmi)',
         '(?:nautical |nautische )me?ile|nmi|mille nautique' ],
       1 ],
     [ 3,
       1,
       'nl',
       [ 'nautical mile (nl)',
         'nautical league|nautische liga|ligue nautique' ],
       1 ],
     [ 3, 3, 'px', 'pixel' ],
     [ 3, 3, 'pt', [ 'point', 'point|punkt' ] ],
     [ 3, 3, 'em', [ 'quad (em)', 'quad|geviert' ] ],
     [ 3, 3, 'rem', [ 'root quad (rem)', 'root em' ] ],
     [ 6, 3, 'b', 'bit' ],
     [ 6, 3, 'B', 'byte' ],
     [ 7, 0, 'mol', 'mole' ],
     [ 8, 0, 'A', [ 'ampère', 'ampere|ampère' ] ],
     [ 9, 0, 'cd', 'candela' ],
     [ 10, 0, 'rad', [ 'radian', 'radiant?' ] ],
     [ 11, 0, 'sr', [ 'steradian', 'st[eé]radiant?' ] ],
     [ 12, 0, 'J', 'joule' ],
     [ 13, 0, 'Pa', 'pascal' ],
     [ 13, 0, 'bar', 'bar' ],
     [ 14, 0, 'W', 'watt' ],
     [ 15, 0, 'N', 'newton' ],
     [ 16, 0, 'Wb', 'weber' ],
     [ 17, 0, 'T', 'tesla' ],
     [ 18, 0, 'H', 'henry' ],
     [ 19, 0, 'C', 'coulomb' ],
     [ 20, 0, 'V', 'volt' ],
     [ 21, 0, 'F', 'farad' ],
     [ 22, 0, 'S', 'siemens' ],
     [ 23, 0, 'O', [ 'ohm', '\\u2126|ohm' ] ],
     [ 24, 0, 'Hz', 'hertz' ],
     [ 25, 0, 'lx', [ 'lux', 'lux|beleuchtungsstärke|éclairement' ] ],
     [ 26, 0, 'lm', [ 'lumen', 'lumen|lumina|lumière' ] ],
     [ 27, 0, 'Bq', 'becquerel' ],
     [ 28, 0, 'Gy', 'gray' ],
     [ 29, 0, 'Sv', 'sievert' ],
     [ 30, 0, 'kat', 'katal' ],
     [ 40, 0, 'dioptry', 'dioptry' ],
     [ 45, 0, 0, [ 'newton second', 'newton se(?:co|ku)nde?' ] ],
     [ 46,
       0,
       0,
       [ 'newton meter second',
         'newton meter|m[eè]tre se(?:co|ku)nde?' ] ],
     [ 47, 0, 0, [ 'newton meter', 'newton meter|m[eè]tre' ] ],
     [ 49, 0, 0, [ 'reciprocal meter', 'reciprocal meter|m[eè]tre' ] ],
     [ 52, 0, 0, [ 'joule second', 'joule se(?:co|ku)nde?' ] ],
     [ 63, 0, 0, [ 'pascal second', 'pascal se(?:co|ku)nde?' ] ],
     [ 71, 0, 0, [ 'lumen second', 'lumen se(?:co|ku)nde?' ] ],
     [ 72, 0, 0, [ 'lux second', 'lux se(?:co|ku)nde?' ] ],
     [ [ 'thermodynamic temperature by amount of substance' ],
       0,
       0,
       [ 'kelvin mole', 'kelvin mole?' ] ],
     [ [ 'thermodynamic temperature by mass' ],
       0,
       0,
       [ 'kilogramm? kelvin', 'kilogramm? kelvin' ] ],
     [ [ 'length by thermodynamic temperature' ],
       0,
       0,
       [ 'meter kelvin', '(?:meter|m[eè]tre) kelvin' ] ],
     [ [ 'electric conductance by area' ],
       0,
       0,
       [ 'siemens square meter',
         'siemens (square ?|quadrat ?)?meter|m[eè]tre' ] ] ],
  pows: 
   { _2: 
      [ 'square ',
        'square|quadrat|centiare|centare|(?:s?q[. ]*)',
        '(?: carr[eé])|(?: squared?)|\\u00B2|2' ],
     _3: 
      [ 'cubic ',
        '[ck]ubi[ck]|(?:[ck]b[. ]*)',
        '(?: cubed?)|\\u00B3|3' ],
     _4: 
      [ 'quartic ',
        'quarti(?:c|que)|biquadratische?|q.',
        '(?: quarti(?:c|que))|\\u2074|4' ],
     length: [ 0, 3, 4, 5 ] },
  per: 
   { _: 'per|pro|a l?|\\/',
     length: { length: 10, time: 31, time_2: 32, time_3: 42, time_4: 43 },
     area: { area: 11, time: 62 },
     mass: { volume: 33, mass: 34, area: 50 },
     volume: { mass: 35, time: 41, 'amount of substance': 51 },
     'plane angle': { time: 44 },
     force: { length: 12, area: 13, time: 48 },
     energy: 
      { time: 14,
        'thermodynamic temperature by amount of substance': 54,
        'thermodynamic temperature by mass': 55,
        'amount of substance': 56,
        mass: 57,
        volume: 58 },
     'electric current': { length: 36, area: 37 },
     'amount of substance': { volume: 38 },
     'luminous intensity': { area: 39 },
     power: { area: 60, 'length by thermodynamic temperature': 61 },
     'electric charge': { area: 64, volume: 65, mass: 73 },
     'electric conductance': { length: 66 },
     'electric conductance by area': { 'amount of substance': 67 },
     'electric capacitance': { length: 68 },
     inductance: { length: 69 },
     voltage: { length: 70 },
     'radioactivity absorbed dose': { time: 74 } },
  by: 
   { _: 'by|\\u22C5|\\u00B7|\\u00D7|\\u2715|\\*',
     force: { time: 45, length: 47 },
     energy: { time: 52, 'thermodynamic temperature': 53 },
     pressure: { time: 63 },
     'luminous flux': { time: 71 },
     illumination: { time: 72 },
     'electric resistance': { length: 75 } } }
module.exports = (function () {
				var _u = {
					s: exports.zip.units.sort(function(a,bA) { return a[2].length - bA[2].length; }),
					w: exports.zip.units.sort(function(a,bA) { return _.last(a[3]).length - _.last(bA[3]).length; })
				};
				var s = '(?:\\( ?|\\) ?| |$)?', end = '(?:\\b|$)(?: |$)?';
				function prefix(is) { return exports.zip.prefixes.map(function(a){return a[(is==='s') ? 1 : 2];}) }
				function unit(is) { return _u[is].map(function(a){return (is==='s') ? a[2] : _.last(a[3]);}) }
				function pows(i){ 
					return ['(?:(', Object.keys(exports.zip.pows).filter(function(k){return k.substr(0,1) === '_';}).map(function(k){
						return exports.zip.pows[k][i];
					}).join(')|('), '))?'].join('');
				}
				var nr = Object.keys(data.multiple).concat(Object.keys(data.tens),Object.keys(data.teens),Object.keys(data.ones));
				exports.zip.numOnly = new RegExp(['(',nr.join('|'),')',end].join(''), 'gi');
				nr = ['((?:(?:',nr.concat(data.plus,data.minus,data.factors,data.decimal,'\\d+').join('|'),')(?: ?))+)'].join('');
				var p = { w:prefix('w'), s:prefix('s') };
				p.W = [{matches: new RegExp(['(',p.w.join(')|('),')'].join(''), 'i')}];
				p.S = [{matches: new RegExp(['(',p.s.join(')|('),')'].join(''), '')}];
				exports.zip.prefix = _.mixin(p, {fn:{w:_.tokenFn(p, 'W', 1, 1), s:_.tokenFn(p, 'S', 1, 1)}});
				
				var u = { w:unit('w'), s:unit('s') };
				u.W = [{matches: new RegExp(['(',u.w.join(')|('),')'].join(''), 'i')}];
				u.S = [{matches: new RegExp(['(',u.s.join(')|('),')'].join(''), '')}];
				exports.zip.units = _u;
				exports.zip.unit = _.mixin(u, {fn:{w:_.tokenFn(u, 'W', 1, 1), s:_.tokenFn(u, 'S', 1, 1)}});
				p = ['(?:(',p.w.join('|'),')|(?:(',p.s.join('|'),')(?=(?:',u.s.join('|'),')(?:',exports.zip.by._,'|',exports.zip.per._,'|\\b|$))))?'].join('');
				u = ['(',u.w.join('|'),')?(?: |$)?(',u.s.join('|'),')?'].join('');
				var unit = [s,pows(1),s,p,u,s,pows(2),s].join('');
				var a = [
					nr,
					unit,'(',exports.zip.by._,')?',unit,
					'(',exports.zip.per._,')?',s,
					unit,'(',exports.zip.by._,')?',unit,
					end
				];
				exports.zip.numeral = new RegExp(a.join(''), 'gi');
				return exports.zip;
			})();