if (!lang) {var lang = 'en';}

var data = require('../');
var conjugate = require('../../../parents/verb/conjugate');
var to_doer = require('../../../parents/verb/conjugate/to_doer');
var to_adverb = require('../../../parents/adjective/conjugate/to_adverb');
var to_comparative = require('../../../parents/adjective/conjugate/to_comparative');
var to_superlative = require('../../../parents/adjective/conjugate/to_superlative');
var main = {};

  exports.zip = { EX: [ 'th2e' ],
  NN: 
   [ 'pr4ident',
     'dollar',
     'student',
     'patent',
     'fund%',
     'morn%',
     'bank%',
     'ceil%',
     'en2gy',
     'secretary',
     'purpose',
     'event' ],
  NNS: [ 'friends', 'sons', 'partn2s' ],
  CC: 
   [ '!',
     'or',
     'while',
     'nor',
     'though',
     'because',
     'but',
     'for',
     'and',
     'if',
     '!1',
     'before',
     'although',
     'not',
     'wheth2',
     'yet',
     'th2efore',
     'plus',
     'v2sus' ],
  VBD: [ 'walk3', 'wh2e\'d', 'when\'d', '!\'d', '~\'d' ],
  VBN: [ 'born' ],
  VBG: [ 'accord%', 'r4ult%', 'stain%' ],
  DT: 
   [ 'that',
     'this',
     'th4e',
     'those',
     'such',
     'neith2',
     'which',
     '~',
     'the',
     'no',
     'any',
     'each',
     '~1',
     'which1',
     'when1',
     'who1',
     'wh21',
     'an',
     'a',
     'own',
     'few',
     'both',
     'much',
     'some',
     'enough',
     '1y',
     'anoth2',
     'plenty',
     'least',
     'various',
     'eith2',
     'else',
     'la',
     'le',
     'l4',
     'd4',
     'de',
     'du',
     'el' ],
  IN: 
   [ 'in',
     'out',
     'on',
     'off',
     'away',
     'back',
     'ov2',
     'und2',
     'up',
     'down',
     'togeth2',
     'apart',
     'into',
     'for',
     'against',
     'aft2',
     'before',
     'of',
     'about',
     'to',
     'round',
     'through',
     'onto',
     'around',
     'behind',
     'above',
     'across',
     'ahead',
     'upon',
     'aback',
     'forth',
     'along',
     'way',
     'with',
     'without',
     'until',
     'except',
     'by',
     'between',
     'at',
     'as',
     'from',
     'among',
     'amid',
     'since',
     'within',
     'dur%',
     'p2',
     'throughout',
     'than',
     'via',
     'd4pite',
     'above',
     'below',
     'unl4s',
     'wh2eas',
     'unlike',
     'towards',
     'b4id4',
     'amidst',
     'amongst',
     'apropos',
     'atop',
     'barr%',
     'chez',
     'mid',
     'midst',
     'notwithstand%',
     'qua',
     'sans',
     'vis-a-vis',
     'thru',
     'till',
     'v2sus',
     'w/o',
     '\'o',
     'o\'',
     'a\'' ],
  PP: 
   [ 'mine',
     'my',
     'my_',
     'your',
     'your_',
     'your&',
     'him_',
     'h2s',
     'h2_',
     'it_',
     'ours',
     'our&',
     'theirs',
     'them_',
     'them&',
     'none',
     'who',
     'whom',
     'whose',
     'some#',
     'any#',
     'anyone',
     'lot',
     'no#',
     '1y#' ],
  UH: 
   [ 'uhh',
     'uh-oh',
     'ugh',
     'she4h',
     'eww',
     'pff',
     'voila',
     'oy',
     'eep',
     'hurrah',
     'yuck',
     'ow',
     'duh',
     'oh',
     'hmm',
     'yeah',
     'whoa',
     'ooh',
     'whee',
     'ah',
     'bah',
     'gah',
     'yaa',
     'phew',
     'gee',
     'ahem',
     'eek',
     'meh',
     'yahoo',
     'oops',
     'd\'oh',
     'psst',
     'argh',
     'grr',
     'nah',
     'shhh',
     'whew',
     'mmm',
     'yay',
     'uh-huh',
     'boo',
     'wow',
     'nope' ],
  FW: [ 'ie', 'etc' ],
  RB: 
   [ 'when',
     'whence',
     'wh2e',
     'why',
     'now',
     'again',
     'h2e',
     'so',
     'v2y',
     'just',
     'too',
     'quite',
     'then',
     'once',
     'maybe',
     'rath2',
     'anyway',
     'hence',
     'furth2',
     'already',
     'soon',
     'direct0',
     'toward',
     'for1',
     'apart',
     'instead',
     'y4',
     'alone',
     'ago',
     'inde3',
     '1',
     'p2haps',
     'thus',
     'often',
     'n1',
     'always',
     'sometim4',
     'also',
     's1al',
     'random0',
     'abroad',
     'almost',
     'twice',
     'some~',
     'some!',
     'meanwhile',
     'furth2more',
     'aside',
     'moreov2',
     'anymore',
     'new0',
     'damn',
     'absolute0',
     'actu;',
     'apparent0',
     'approximate0',
     'c2tain0',
     'clear0',
     'complete0',
     'definite0',
     'eas@',
     'effective0',
     'entire0',
     '4senti;',
     'exact0',
     'extreme0',
     'fair0',
     'frank0',
     'frequent0',
     'gen2;',
     'hard0',
     'heav@',
     'high0',
     'hopeful0',
     'large0',
     'lit2;',
     'most0',
     'nec4sar@',
     'nice0',
     'obvious0',
     'particular0',
     'possib0',
     'primar@',
     'probab0',
     'precise0',
     're;',
     'relative0',
     's2ious0',
     'significant0',
     'slight0',
     'specific;',
     'strong0',
     'sure0',
     'tot;',
     'tru0',
     'typic;',
     'ultimate0',
     'usu;',
     'virtu;',
     'wide0' ],
  RBR: [ 'more' ],
  RBS: [ 'most' ] }
  var unzip = function lexicon(cat){
			if (typeof window != 'undefined' && window.hasOwnProperty('nlp')) { data = window; }
			var nrOnes = Object.keys(data.numbers.ones).filter(function(s){ return s!='a' }) 
			var did = {
				NN: data.nouns_inflect.NN.map(function(a){ return a[0]; }).concat(Object.keys(data.nouns_inflect.uncountables)),
				NNS: data.nouns_inflect.NN.map(function(a){ return a[1]; }),
				VBD: data.verbs_conjugate.irregulars.map(function(o){ return o.past; }),
				VBG: data.verbs_conjugate.irregulars.map(function(o){ return o.gerund; }),
				RB: Object.keys(data.adverbs_decline).concat(Object.keys(data.adjectives_decline.adj_to_advs).map(function(s) { 
					return data.adjectives_decline.adj_to_advs[s];
				})),
			}
			var lexiZip = {
				NNA: Object.keys(data.verbs_conjugate.irregularDoers).map(function(s){ return data.verbs_conjugate.irregularDoers[s];  }),
				NNAB: data.abbreviations.nouns,
				NNP: Object.keys(data.firstnames),
				PP: Object.keys(data.nouns.pps),
				PRP: Object.keys(data.nouns.prps),
				CP: Object.keys(data.verbs_special.CP),
				MD: Object.keys(data.verbs_special.MD),
				VBP: data.verbs_conjugate.irregulars.map(function(o){ return o.infinitive; }),
				VBZ: data.verbs_conjugate.irregulars.map(function(o){ return o.present; }),
				JJR: Object.keys(data.adjectives_decline.to_comparative).map(function(s){ return data.adjectives_decline.to_comparative[s]; }),
				JJS: Object.keys(data.adjectives_decline.to_superlative).map(function(s){ return data.adjectives_decline.to_superlative[s]; }),
				JJ: data.adjectives_demonym.concat(
						Object.keys(data.adjectives_decline.adv_donts), Object.keys(data.adjectives_decline.adj_to_advs),
						Object.keys(data.adjectives_decline.to_comparative), Object.keys(data.adjectives_decline.to_superlative),
						Object.keys(data.adverbs_decline).map(function(s) { return data.adverbs_decline[s]; })
				),
				CD: nrOnes.concat( 
					Object.keys(data.numbers.teens), 
					Object.keys(data.numbers.tens), 
					Object.keys(data.numbers.multiple),
					Object.keys(data.dates.months),
					Object.keys(data.dates.days)
				)
			}
			//::NODE::
			if (cat===1) {return [did,lexiZip]}
			//::
			
			if (!cat) {
				var toMain = function(key, o) {
					o[key].forEach(function(w)Â { if (w && !main[w]) {main[w] = key} });
				}
				// irregulars to main
				for (var key in did) { toMain(key, did) }
				for (var key in lexiZip) { toMain(key, lexiZip) }
				// zip to main
				for (var key in exports.zip) {

					toMain(key, exports.zip);
				}
				
				// conjugate all phrasal verbs:
				var c = {};
				var splits, verb, particle, phrasal;
				for (var pv in data.phrasalVerbs) {
					splits = pv.split(' ');
					verb = splits.shift();
					particle = splits.join(' ');
					c = conjugate(verb);
					for (var tense in c) {
						if (tense != 'doer') {
							phrasal = c[tense] + ' ' + particle;
							main[phrasal] = data.schema.getTense(tense).tag;
						}
					}
				}
				// conjugate all verbs: (~8ms, triples the lexicon size)
				c = {};
				data.verbs.forEach(function(v) {
					c = conjugate(v);
					//var d = to_doer(v);
					for (var tense in data.schema._tenses) {
						if (c[tense] && !main[c[tense]]) { 
							main[c[tense]] = data.schema.getTense(tense).tag;
						}
						//if (d && !main[d]) { main[d] = 'NNA' }
					}
				});
				// decline all adjectives to their adverbs_ (~13ms)
				// 'to_adverb','to_superlative','to_comparative'
				data.adjectives.concat(Object.keys(data.adjectives_decline.convertables)).forEach(function(j) {
					main[j] = 'JJ';
					var adv = to_adverb(j);
					if (adv && adv !== j && !main[adv]) {
						main[adv] = main[adv] || 'RB'
					}
					var c = to_comparative(j);
					if (c && !c.match(/^more ./) && c !== j && !main[c]) {
						main[c] = main[c] || 'JJR'
					}
					var s = to_superlative(j);
					if (s && !s.match(/^most ./) && s !== j && !main[s]) {
						main[s] = main[s] || 'JJS'
					}
				});
				// Make sure CP are CP and not conjugated verb type
				// TODO FIXME
				lexiZip.CP.forEach(function(w) {
					main[w] = 'CP';
				});
				
				return main;
			}
			if (cat in did) { return did[cat] }
			return [];
		}
  unzip();
module.exports = main;
